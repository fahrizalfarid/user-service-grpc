// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: src/proto/userValidator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserValidatorClient is the client API for UserValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserValidatorClient interface {
	IsUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*Found, error)
	IsEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*Found, error)
	IsUserExists(ctx context.Context, in *EmailOrUsernameRequest, opts ...grpc.CallOption) (*Found, error)
}

type userValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewUserValidatorClient(cc grpc.ClientConnInterface) UserValidatorClient {
	return &userValidatorClient{cc}
}

func (c *userValidatorClient) IsUsernameExists(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*Found, error) {
	out := new(Found)
	err := c.cc.Invoke(ctx, "/proto.UserValidator/IsUsernameExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userValidatorClient) IsEmailExists(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*Found, error) {
	out := new(Found)
	err := c.cc.Invoke(ctx, "/proto.UserValidator/IsEmailExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userValidatorClient) IsUserExists(ctx context.Context, in *EmailOrUsernameRequest, opts ...grpc.CallOption) (*Found, error) {
	out := new(Found)
	err := c.cc.Invoke(ctx, "/proto.UserValidator/IsUserExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserValidatorServer is the server API for UserValidator service.
// All implementations must embed UnimplementedUserValidatorServer
// for forward compatibility
type UserValidatorServer interface {
	IsUsernameExists(context.Context, *UsernameRequest) (*Found, error)
	IsEmailExists(context.Context, *EmailRequest) (*Found, error)
	IsUserExists(context.Context, *EmailOrUsernameRequest) (*Found, error)
	mustEmbedUnimplementedUserValidatorServer()
}

// UnimplementedUserValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedUserValidatorServer struct {
}

func (UnimplementedUserValidatorServer) IsUsernameExists(context.Context, *UsernameRequest) (*Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUsernameExists not implemented")
}
func (UnimplementedUserValidatorServer) IsEmailExists(context.Context, *EmailRequest) (*Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmailExists not implemented")
}
func (UnimplementedUserValidatorServer) IsUserExists(context.Context, *EmailOrUsernameRequest) (*Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserExists not implemented")
}
func (UnimplementedUserValidatorServer) mustEmbedUnimplementedUserValidatorServer() {}

// UnsafeUserValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserValidatorServer will
// result in compilation errors.
type UnsafeUserValidatorServer interface {
	mustEmbedUnimplementedUserValidatorServer()
}

func RegisterUserValidatorServer(s grpc.ServiceRegistrar, srv UserValidatorServer) {
	s.RegisterService(&UserValidator_ServiceDesc, srv)
}

func _UserValidator_IsUsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserValidatorServer).IsUsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserValidator/IsUsernameExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserValidatorServer).IsUsernameExists(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserValidator_IsEmailExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserValidatorServer).IsEmailExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserValidator/IsEmailExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserValidatorServer).IsEmailExists(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserValidator_IsUserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOrUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserValidatorServer).IsUserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserValidator/IsUserExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserValidatorServer).IsUserExists(ctx, req.(*EmailOrUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserValidator_ServiceDesc is the grpc.ServiceDesc for UserValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserValidator",
	HandlerType: (*UserValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsUsernameExists",
			Handler:    _UserValidator_IsUsernameExists_Handler,
		},
		{
			MethodName: "IsEmailExists",
			Handler:    _UserValidator_IsEmailExists_Handler,
		},
		{
			MethodName: "IsUserExists",
			Handler:    _UserValidator_IsUserExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/userValidator.proto",
}
